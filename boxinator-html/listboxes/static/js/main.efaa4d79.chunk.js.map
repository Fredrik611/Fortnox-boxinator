{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Styles","styled","div","Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","footerGroups","rows","prepareRow","map","group","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","getFooterGroupProps","getFooterProps","App","useMemo","Header","Footer","accessor","info","total","React","reduce","sum","values","weight","Cell","whole","value","console","log","style","background","height","price","useState","setData","useEffect","axios","get","then","res","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"8QAOMA,EAASC,IAAOC,IAAV,gkBAuCZ,SAASC,EAAT,GAAgC,IAAhBC,EAAe,EAAfA,QAASC,EAAM,EAANA,KAErB,EAOIC,mBAAS,CACTF,UACAC,SARAE,EADJ,EACIA,cACAC,EAFJ,EAEIA,kBACAC,EAHJ,EAGIA,aACAC,EAJJ,EAIIA,aACAC,EALJ,EAKIA,KACAC,EANJ,EAMIA,WAKJ,OACI,kDAAWL,KAAX,cACI,gCACCE,EAAaI,KAAI,SAAAC,GAAK,OACnB,8CAAQA,EAAMC,uBAAd,aACKD,EAAME,QAAQH,KAAI,SAAAI,GAAM,OACrB,8CAAQA,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,wBAK5D,iDAAWX,KAAX,aACCG,EAAKE,KAAI,SAACO,EAAKC,GAEZ,OADAT,EAAWQ,GAEP,8CAAQA,EAAIE,eAAZ,aACKF,EAAIG,MAAMV,KAAI,SAAAW,GACX,OAAO,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKL,OAAO,uBAMjE,gCACCT,EAAaG,KAAI,SAAAC,GAAK,OACnB,8CAAQA,EAAMY,uBAAd,aACKZ,EAAME,QAAQH,KAAI,SAAAI,GAAM,OACrB,8CAAQA,EAAOU,kBAAf,aAAkCV,EAAOE,OAAO,4BAmGzDS,MAxFf,WACI,IAAMxB,EAAUyB,mBAAQ,iBAAM,CACtB,CAEIC,OAAQ,QACRC,OAAO,QAEP3B,QAAS,CACL,CACI0B,OAAQ,WACRE,SAAU,QAGd,CACIF,OAAQ,SACRE,SAAU,SACVD,OAAQ,SAAAE,GAEJ,IAAMC,EAAQC,IAAMN,SAChB,kBACII,EAAKtB,KAAKyB,QAAO,SAACC,EAAKjB,GAAN,OAAcA,EAAIkB,OAAOC,OAASF,IAAK,KAC5D,CAACJ,EAAKtB,OAGV,OAAO,+CAAUuB,OAGzB,CACIJ,OAAQ,QACRE,SAAU,QACVQ,KAAM,YAAa,IAGXC,EAAQ,MAHE,EAAVjB,KAEIkB,MAGR,OADAC,QAAQC,IAAIH,GAER,qBAAKI,MAAO,CAACC,WAAWL,EAAOM,OAAO,YAKlD,CACIjB,OAAQ,UACRE,SAAU,UACVD,OAAQ,IAEZ,CACID,OAAQ,iBACRE,SAAU,QACVD,OAAQ,SAAAE,GAEJ,IAAMC,EAAQC,IAAMN,SAChB,kBACII,EAAKtB,KAAKyB,QAAO,SAACC,EAAKjB,GAAN,OAAcA,EAAIkB,OAAOU,MAAQX,IAAK,KAC3D,CAACJ,EAAKtB,OAGV,OAAO,+CAAUuB,YAI9B,IAEX,EAAwBe,mBAAS,IAAjC,mBAAO5C,EAAP,KAAa6C,EAAb,KAiBF,OAbEC,qBAAU,WACNC,IAAMC,IAAI,+BACLC,MAAK,SAAAC,GACFZ,QAAQC,IAAIW,EAAIlD,MAChB6C,EAAQK,EAAIlD,SAEfmD,OAAM,SAAAC,GACHd,QAAQC,IAAIa,QAErB,IAKC,cAACzD,EAAD,UACI,cAACG,EAAD,CAAOC,QAASA,EAASC,KAAMA,OCvK5BqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAS/C,OACP,cAAC,IAAMgD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.efaa4d79.chunk.js","sourcesContent":["import React, {useState, useEffect, useMemo} from \"react\";\nimport axios from \"axios\";\nimport './App.css';\nimport { useTable } from \"react-table\";\nimport styled from 'styled-components'\n\n// div style for the table.\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n\n    tfoot {\n      tr:first-child {\n        td {\n          border-top: 2px solid black;\n        }\n      }\n      font-weight: bolder;\n    }\n  }\n`\n// makes the table.\nfunction Table({columns, data}){\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        footerGroups,\n        rows,\n        prepareRow,\n    } = useTable({\n        columns,\n        data,\n    })\n    return(\n        <table {...getTableProps()}>\n            <thead>\n            {headerGroups.map(group => (\n                <tr {...group.getHeaderGroupProps()}>\n                    {group.headers.map(column => (\n                        <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                    ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n                prepareRow(row)\n                return (\n                    <tr {...row.getRowProps()}>\n                        {row.cells.map(cell => {\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        })}\n                    </tr>\n                )\n            })}\n            </tbody>\n            <tfoot>\n            {footerGroups.map(group => (\n                <tr {...group.getFooterGroupProps()}>\n                    {group.headers.map(column => (\n                        <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n                    ))}\n                </tr>\n            ))}\n            </tfoot>\n\n        </table>\n    )\n}\n\n// the information seen in every cell\nfunction App() {\n    const columns = useMemo(() => [\n            {\n                // first group - TV Show\n                Header: \"Boxes\",\n                Footer:\"Boxes\",\n                // First group columns\n                columns: [\n                    {\n                        Header: \"Receiver\",\n                        accessor: \"name\",\n\n                    },\n                    {\n                        Header: \"weight\",\n                        accessor: \"weight\",\n                        Footer: info => {\n                            // Calculates total weight\n                            const total = React.useMemo(\n                                () =>\n                                    info.rows.reduce((sum, row) => row.values.weight + sum, 0),\n                                [info.rows]\n                            )\n\n                            return <>Total: {total}</>\n                        },\n                    },\n                    {\n                        Header: \"color\",\n                        accessor: \"color\",\n                        Cell: ({cell}) => {\n                            // set the rbg color to show in each cell.\n                            const { value } = cell;\n                            var whole = \"rgb\"+value;\n                            console.log(whole)\n                            return(\n                                <div style={{background:whole, height:\"38px\"}}/>\n\n                            )\n                        }\n                    },\n                    {\n                        Header: \"country\",\n                        accessor: \"country\",\n                        Footer: \"\",\n                    },\n                    {\n                        Header: \"Shipping price\",\n                        accessor: \"price\",\n                        Footer: info => {\n                            // Calculates total price\n                            const total = React.useMemo(\n                                () =>\n                                    info.rows.reduce((sum, row) => row.values.price + sum, 0),\n                                [info.rows]\n                            )\n\n                            return <>Total: {total}</>\n                        },\n                    }\n                ]\n            }],[]);\n\n    const [data, setData] = useState([]);\n\n\n    // get information from the server.\n    useEffect(() => {\n        axios.get(\"http://localhost:8080/boxes\")\n            .then(res => {\n                console.log(res.data);\n                setData(res.data)\n            })\n            .catch(err => {\n                console.log(err )\n            })\n    }, []);\n\n\n\n  return (\n        <Styles>\n            <Table columns={columns} data={data}/>\n\n        </Styles>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}